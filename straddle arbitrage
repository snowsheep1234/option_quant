#-*-coding:utf-8-*-
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
%matplotlib inline
from pylab import mpl
import datetime as dt
import math

mpl.rcParams['font.sans-serif']=['SimHei']
mpl.rcParams['axes.unicode_minus']=False

data=pd.read_csv('C:\\Users\\Xue\\Desktop\\straddle.csv',encoding='unicode_escape')
data.columns=['time','M1','M2','idx','IV1','IV2','etf50']
datenums = np.array(data['time']) 
timestamps = pd.to_datetime(datenums-719529, unit='D')
data.index=timestamps
#data.set_index(["time"], inplace=True)
data['dif']=data['M2']-data['M1']
data['dif_IV']=data['IV2']-data['IV1']
#data['50ETF收益率']=data['etf50']/data['etf50'].iloc[0]-1

def sell(data,window,upper,mid,lower,sig,obj,obj2):
    #obj = signal generation object
    #obj2 = trading object
    df=data.copy().dropna()
    df['middle']=df[obj].rolling(window).quantile(mid)
    df['upper']=df[obj].rolling(window).quantile(upper)
    df['lower']=df[obj].rolling(window).quantile(lower)
    df.dropna(inplace=True)
    df['50ETF收益率']=df['etf50']/df['etf50'].iloc[0]-1
    #设计买卖信号
    if sig==-1:
        #当资金突破上轨，信号设置为1
        df.loc[(df[obj]>df.upper) &( df['idx']<221) ,'signal']=1
        #当资金突破跌破中轨，信号为0
        df.loc[df[obj]<df.middle,'signal']=0
        #收盘信号设置为0
        df.loc[df['idx']==241,'signal']=0
    elif sig ==1:
        df.loc[(df[obj]<df.lower) &( df['idx']<221) ,'signal']=1
        df.loc[df[obj]>df.middle,'signal']=0
        df.loc[df['idx']==241,'signal']=0
       
    df['position']=df['signal']
    df['position'].fillna(method='ffill',inplace=True)
    df['position'].fillna(0,inplace=True)

    #根据交易信号和仓位计算策略每分钟收益
    df.loc[df.index[0],'ret']=0
    #卖出的position收益
    df.loc[df['position']>df['position'].shift(1),'ret']=0
    #买回收益
    df.loc[df['position']<df['position'].shift(1),'ret']=sig*(df[obj2]-df[obj2].shift(1))
    #仓位不变时收益
    df.loc[df['position']==df['position'].shift(1),'ret']=sig*(df[obj2]-df[obj2].shift(1))*df['position']
    #计算累计收益
    df['策略累计收益']=df.ret.cumsum()
    df['策略累计收益'].plot()
    #df['50ETF收益率'].plot()
    if sig==-1:
        plt.legend(['做空策略'])
    elif sig==1:
        plt.legend(['做多策略'])

    #ret_asset=df['策略累计收益']/20000
    
    #print("收益统计")
    #print("收益率："+str(ret_asset[-1]))
    #print("年化收益率："+str(ret_asset[-1]/313*250))
   
    return df

def main(df):
    
    df.loc[df['position']<df['position'].shift(1),'sell_sig']=1    
    df.loc[df['position']>df['position'].shift(1),'buy_sig']=1
    if df['position'][0]==1:
        #print("error")
        df['buy_sig'][0]=df['position'][0]
        #print(df.head())
    df['策略收益率']=df['策略累计收益']/20000
    df['sell_sig']=df['sell_sig']*df['策略累计收益']
    df['buy_sig']=df['buy_sig']*df['策略累计收益']
    fig = plt.figure()
    left, bottom, width, height = 0.1, 0.1, 0.8, 0.8
    ax1 = fig.add_axes([left, bottom, width, height])  # main axes
    ax1.plot(df['策略收益率'],label="策略收益率")
    ax1.plot(df['50ETF收益率'],label="指数收益率")
    plt.legend()
    plt.show()
    df.head()
    buy={'buy':df['buy_sig'].dropna()}
    buy=pd.DataFrame(buy)
    buy=buy.reset_index()
    sell={'sell':df['sell_sig'].dropna()}
    sell=pd.DataFrame(sell)
    sell=sell.reset_index()
    dat=pd.concat([buy,sell],axis=1)
    dat['rt']=(dat['sell']-dat['buy'])
    dat.loc[dat['rt']>0,'rt_right']=dat['rt']
    dat.loc[dat['rt']<=0,'rt_wrong']=dat['rt']
    trade_r=dat['rt_right'].count()

    print("收益统计")
    trade_times=dat['rt'].count()
    avg_right=dat['rt_right'].mean()
    avg_wrong=-dat['rt_wrong'].mean()
    print("交易次数："+str(trade_times))
    print("平均每笔收益："+str(round(df['策略累计收益'][-1]/trade_times,2)))
    print("胜率："+str(round(trade_r/trade_times,3)))
    #print(dat)
    #if avg_wrong!=0:
    print("盈亏比："+str(round(avg_right/avg_wrong,3)))
        
    print("总收益："+str(df['策略累计收益'][-1]))
    print("总收益（扣除手续费）："+str(df['策略累计收益'][-1]-trade_times*12))
    ret_asset=df['策略累计收益']/20000
    print("收益率："+str(round(ret_asset[-1],3)))
    print("年化收益率："+str(round(ret_asset[-1],3)))
    print("年化收益率扣除手续费(2元/次）："+str(round((df['策略累计收益'][-1]-trade_times*12)/20000,3)))
    #print(df.head())



#df=sell(data,4820,0.75,0.5,0.25,-1,'dif','dif')
#main(df)
#df.to_csv('C:\\Users\\Xue\\Desktop\\df_straddle.csv')


